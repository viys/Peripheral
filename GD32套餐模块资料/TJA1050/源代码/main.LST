C51 COMPILER V8.16   MAIN                                                                  12/26/2010 00:08:40 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2           * CANBUS开发板
   3           * 
   4           * 用途：CAN自收发测试程序
   5           * 
   6           * 作者                                 日期                            备注
   7           * Huafeng Lin                  20010/12/10                     新增
   8           * Huafeng Lin                  20010/12/25                     修改
   9           * 
  10           */
  11          
  12          #include <reg52.h>
  13          #include <intrins.h>
  14          #include "sjapelican.h"
  15          #include "config.h"
  16          
  17          #define uint unsigned int
  18          #define uchar unsigned char
  19          
  20          sbit DAT=P2^3;
  21          sbit CLK=P2^2;
  22          sbit LED3=P2^7;
  23          sbit LED4=P2^6;
  24          sbit LED1=P2^5;
  25          sbit LED2=P2^4;
  26          
  27          uint8 DisBuff[4];
  28          
  29          uchar table[]={0x28,0x7E,0xA4,0x64,0x72,0x61,0x21,0x7C,0x20,0x60,0xff};
  30          
  31          void delay(uint Delay)  //延时
  32          {
  33   1              unsigned  int ty;
  34   1              for(;Delay>0;Delay--)
  35   1          {
  36   2                      for(ty=0;ty<10;ty++)
  37   2                      {;}
  38   2              }
  39   1      }
  40          
  41          void sendchar(uchar byte)
  42          {
  43   1              uchar ch,i;
  44   1              ch=table[byte];
  45   1              for(i=0;i<8;i++)//8位数据传输完毕后才给数码管显示
  46   1              { 
  47   2                      if(0x80==(ch&0x80))DAT=1;
  48   2                      else DAT=0;
  49   2                      _nop_();
  50   2                      CLK=0;
  51   2                      _nop_();
  52   2                      CLK=1;
  53   2                      ch<<=1;
  54   2              }
  55   1      }
C51 COMPILER V8.16   MAIN                                                                  12/26/2010 00:08:40 PAGE 2   

  56          
  57          void LED_Disp_Seg7()
  58          {
  59   1              DisBuff[0] = Txd_data%10;               //取个位数
  60   1              DisBuff[1] = Txd_data%100/10;   //取十位数
  61   1              DisBuff[2] = Rxd_data%10;               //百位数
  62   1              DisBuff[3] = Rxd_data%1000/10;  //千位数
  63   1      
  64   1              LED4=1;
  65   1              LED1=0;
  66   1              sendchar(DisBuff[3]);
  67   1              delay(20);
  68   1              LED1=1;
  69   1              LED2=0;
  70   1              sendchar(DisBuff[2]);
  71   1              delay(20);
  72   1              LED2=1;
  73   1              LED3=0;
  74   1              sendchar(DisBuff[1]);
  75   1              delay(20);
  76   1              LED3=1;
  77   1              LED4=0;
  78   1              sendchar(DisBuff[0]);
  79   1              delay(20);
  80   1      }
  81          
  82          void mDelay(uint16 mtime)
  83          {
  84   1              for(; mtime > 0; mtime--)
  85   1              {
  86   2                      uint8 j = 244;
  87   2                      while(--j);
  88   2              }       
  89   1      }
  90          
  91          void INT0_Data(void) interrupt 2
  92          {//INT0按键为计数按键
  93   1          EA = 0;
  94   1          Txd_data++; //存储计数结果，并为待发送的数据
  95   1              Peli_TXD();
  96   1          EA = 1;
  97   1      }
  98          
  99          void Peli_RXD(void) interrupt 0
 100          {//接收数据函数，在中断服务程序中调用
 101   1      
 102   1          uint8 data Status;
 103   1          EA = 0;//关CPU中断
 104   1      
 105   1          Status = SJA_IR;
 106   1          if(Status & RI_BIT)
 107   1          {//IR.0 = 1 接收中断
 108   2              RX_buffer[0] =  SJA_RBSR0;
 109   2              RX_buffer[1] =  SJA_RBSR1;
 110   2              RX_buffer[2] =  SJA_RBSR2;
 111   2              RX_buffer[3] =  SJA_RBSR3;
 112   2              RX_buffer[4] =  SJA_RBSR4;
 113   2              RX_buffer[5] =  SJA_RBSR5;
 114   2              RX_buffer[6] =  SJA_RBSR6;
 115   2              RX_buffer[7] =  SJA_RBSR7;
 116   2              RX_buffer[8] =  SJA_RBSR8;
 117   2              RX_buffer[9] =  SJA_RBSR9;
C51 COMPILER V8.16   MAIN                                                                  12/26/2010 00:08:40 PAGE 3   

 118   2              RX_buffer[10] =  SJA_RBSR10;
 119   2              RX_buffer[11] =  SJA_RBSR11;
 120   2              RX_buffer[12] =  SJA_RBSR12;
 121   2      
 122   2              SJA_CMR = RRB_BIT;
 123   2              Status = SJA_ALC;//释放仲裁随时捕捉寄存器
 124   2              Status = SJA_ECC;//释放错误代码捕捉寄存器
 125   2          }
 126   1          SJA_IER = RIE_BIT;// .0=1--接收中断使能；
 127   1      
 128   1              Rxd_data = RX_buffer[5];
 129   1      
 130   1          EA = 1;//打开CPU中断
 131   1      }
 132          
 133          void MCU_Init(void)
 134          {
 135   1              //CPU初始化
 136   1              SJA_RST = 0;//SJA1000复位有效
 137   1              mDelay(10);     //延时
 138   1          SJA_RST = 1;//CAN总线复位管脚,复位无效
 139   1          SJA_CS = 0;//CAN总线片选有效
 140   1          EX1 = 1;//外部中断1使能；CAN总线接收中断
 141   1          IT1 = 1;//外部中断0负边沿触发
 142   1          IT0 = 0;//CAN总线接收中断，低电平触发
 143   1          EX0 = 1;//打开外部中断0
 144   1          EA = 1; //打开总中断
 145   1      }
 146          
 147          void main(void)
 148          {
 149   1              MCU_Init();
 150   1          Peli_Init();
 151   1              //mDelay(1);
 152   1          while(1)
 153   1          {  
 154   2                      LED_Disp_Seg7();
 155   2          }
 156   1      }
 157          
 158          void Peli_Init(void)
 159          {//SJA1000 的初始化
 160   1          uint8 bdata Status;
 161   1          do
 162   1          {//.0=1---reset MODRe,进入复位模式，以便设置相应的寄存器
 163   2           //防止未进入复位模式，重复写入
 164   2              SJA_MOD = RM_BIT |AFM_BIT;
 165   2                      Status = SJA_MOD ;
 166   2          }
 167   1          while(!(Status & RM_BIT));
 168   1      
 169   1          SJA_CDR  = CANMode_BIT|CLKOff_BIT;// CDR.3=1--时钟关闭, .7=0---basic CAN, .7=1---Peli CAN
 170   1          SJA_BTR0 = 0x03;
 171   1          SJA_BTR1 = 0x1c;//16M晶振，波特率125Kbps
 172   1          SJA_IER  = RIE_BIT;// .0=1--接收中断使能；  .1=0--关闭发送中断使能
 173   1          SJA_OCR  = NormalMode|Tx0PullDn|OCPOL1_BIT|Tx1PullUp;// 配置输出控制寄存器
 174   1          SJA_CMR  = RRB_BIT;//释放接收缓冲器
 175   1      
 176   1          SJA_ACR0  = 0x11;
 177   1          SJA_ACR1  = 0x22;
 178   1          SJA_ACR2  = 0x33;
 179   1          SJA_ACR3  = 0x44;//初始化标示码
C51 COMPILER V8.16   MAIN                                                                  12/26/2010 00:08:40 PAGE 4   

 180   1      
 181   1          SJA_AMR0  = 0xff;
 182   1          SJA_AMR1  = 0xff;
 183   1          SJA_AMR2  = 0xff;
 184   1          SJA_AMR3  = 0xff;//初始化掩码
 185   1      
 186   1          do
 187   1          {//确保进入自接收模式
 188   2              SJA_MOD   = STM_BIT;
 189   2              Status  = SJA_MOD;
 190   2           }
 191   1          while( !(Status & STM_BIT) );
 192   1      
 193   1      }//SJA1000 的初始化
 194          
 195          void Peli_TXD( void )
 196          {
 197   1          uint8 data Status;
 198   1      //初始化标示码头信息
 199   1          TX_buffer[0] = 0x88;//.7=0扩展帧；.6=0数据帧; .3=1数据长度
 200   1          TX_buffer[1] = 0x01;//本节点地址
 201   1          TX_buffer[2] = 0x02;//
 202   1          TX_buffer[3] = 0x03;//
 203   1          TX_buffer[4] = 0x04;//
 204   1      
 205   1      //初始化发送数据单元
 206   1          TX_buffer[5]  = Txd_data;
 207   1          TX_buffer[6]  = 0x22;
 208   1          TX_buffer[7]  = 0x33;
 209   1          TX_buffer[8]  = 0x44;//
 210   1          TX_buffer[9]  = 0x55;//
 211   1          TX_buffer[10] = 0x66;//
 212   1          TX_buffer[11] = 0x77;//
 213   1          TX_buffer[12] = 0x88;//
 214   1      
 215   1          do
 216   1          {
 217   2              Status = SJA_SR;
 218   2          }
 219   1          while( Status & RS_BIT);  //SR.4=1 正在接收，等待
 220   1          
 221   1          do
 222   1          {
 223   2              Status = SJA_SR;
 224   2          }
 225   1          while(!(Status & TCS_BIT)); //SR.3=0,发送请求未处理完，等待
 226   1      
 227   1          do
 228   1          {
 229   2              Status = SJA_SR;
 230   2          }
 231   1          while(!(Status & TBS_BIT)); //SR.2=0,发送缓冲器被锁。等待
 232   1      
 233   1          SJA_TBSR0  = TX_buffer[0];
 234   1          SJA_TBSR1  = TX_buffer[1];
 235   1          SJA_TBSR2  = TX_buffer[2];
 236   1          SJA_TBSR3  = TX_buffer[3];
 237   1          SJA_TBSR4  = TX_buffer[4];
 238   1          SJA_TBSR5  = TX_buffer[5];
 239   1          SJA_TBSR6  = TX_buffer[6];
 240   1          SJA_TBSR7  = TX_buffer[7];
 241   1          SJA_TBSR8  = TX_buffer[8];
C51 COMPILER V8.16   MAIN                                                                  12/26/2010 00:08:40 PAGE 5   

 242   1          SJA_TBSR9  = TX_buffer[9];
 243   1          SJA_TBSR10 = TX_buffer[10];
 244   1          SJA_TBSR11 = TX_buffer[11];
 245   1          SJA_TBSR12  = TX_buffer[12];
 246   1      
 247   1          SJA_CMR = SRR_BIT;//置位自发送接收请求
 248   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    614    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     44       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
